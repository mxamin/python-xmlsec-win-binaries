name: windows
on: [push, pull_request]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        # platform: [x86, x64]
        arch: [x64]

    steps:
      - uses: actions/checkout@v3
        name: Checkout code
        with:
          submodules: 'recursive'
  
      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      # - name: Build openssl
      #   run: |
      #     # $sslTarget = If($x64) { "VC-WIN64A" } Else { "VC-WIN32" }
      #     $sslTarget = "VC-WIN32"
      #     $sslDo = "do_ms.bat"
      #     if ($env:MATRIX_ARCH -eq 'x64') {
      #       $sslTarget = "VC-WIN64A"
      #     }

      #     $sslDist = Join-Path $env:GITHUB_WORKSPACE dist\openssl

      #     Set-Location .\openssl
      #     Start-Process -NoNewWindow -Wait perl "Configure no-asm enable-static-engine no-shared $sslTarget --libdir=lib --prefix=$sslDist"
      #     Start-Process -NoNewWindow -Wait -PassThru nmake
      #     Start-Process -NoNewWindow -Wait -PassThru nmake "install_sw"
      #   env:
      #     MATRIX_ARCH: ${{ matrix.arch }}
      #   shell: pwsh

      - name: Build libiconv
        run: |
          Set-Location .\libiconv\MSVC16
          msbuild libiconv_static\libiconv_static.vcxproj /p:Configuration=Release

          $platDir = ""
          if ($env:MATRIX_ARCH -eq 'x64') {
            $platDir = "\x64"
          }
          $iconvLib = Join-Path $env:GITHUB_WORKSPACE "libiconv\MSVC16$platDir\lib"
          $iconvInc = Join-Path $env:GITHUB_WORKSPACE libiconv\source\include
          Write-Output "ICONV_LIB=$iconvLib" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Output "ICONV_INC=$iconvInc" | Out-File -FilePath $env:GITHUB_ENV -Append

          # libxml2 only recognize the iconv.lib file
          $iconvLibFile = Join-Path $iconvLib libiconv_a.lib
          $iconvLibNewFile = Join-Path $iconvLib iconv.lib
          Copy-Item -Path "$iconvLibFile" -Destination "$iconvLibNewFile"
          # "ICONV_LIB=$iconvLib" | Out-File -FilePath $Env:GITHUB_ENV -Append
          # "ICONV_INC=$iconvInc" | Out-File -FilePath $Env:GITHUB_ENV -Append

          Get-ChildItem -Path $iconvLib -Recurse | Select-Object FullName
        env:
          MATRIX_ARCH: ${{ matrix.arch }}
        shell: pwsh

      - name: Build zlib
        run: |
          Write-Host "ICONV_LIB: $env:ICONV_LIB"
          Write-Host "ICONV_INC: $env:ICONV_INC"

          Set-Location .\zlib
          Start-Process -NoNewWindow -Wait nmake "-f win32/Makefile.msc zlib_a.lib"
          Move-Item zlib_a.lib zlib.lib -force
          $zlibLib = (pwd)
          $zlibInc = (pwd)
          # "ZLIB_LIB=$zlibLib" | Out-File -FilePath $Env:GITHUB_ENV -Append
          # "ZLIB_INC=$zlibInc" | Out-File -FilePath $Env:GITHUB_ENV -Append
        shell: pwsh

      # - name: Build libxml2
      #   run: |
      #     Write-Host "ICONV_LIB: $env:ICONV_LIB"
      #     Write-Host "ICONV_INC: $env:ICONV_INC"
      #     Write-Host "ZLIB_LIB: $env:ZLIB_LIB"
      #     Write-Host "ZLIB_INC: $env:ZLIB_INC"

      #     $iconvLib = Join-Path $env:GITHUB_WORKSPACE build\libiconv\MSVC16\x64\lib
      #     $iconvInc = Join-Path $env:GITHUB_WORKSPACE build\libiconv\source\include
      #     $zlibLib = Join-Path $env:GITHUB_WORKSPACE build\zlib
      #     $zlibInc = Join-Path $env:GITHUB_WORKSPACE build\zlib

      #     $libxml2Dist = Join-Path $env:GITHUB_WORKSPACE dist\libxml2

      #     Set-Location .\libxml2\win32
      #     # cscript configure.js lib="$zlibLib;$iconvLib" include="$zlibInc;$iconvInc" vcmanifest=yes zlib=yes 
      #     # cscript configure.js lib="$env:ZLIB_LIB;$env:ICONV_LIB" include="$env:ZLIB_INC;$env:ICONV_INC" vcmanifest=yes zlib=yes
      #     cscript configure.js compiler=msvc prefix="$libxml2Dist" lib="$zlibLib;$iconvLib" include="$zlibInc;$iconvInc" vcmanifest=yes zlib=yes
      #     # Start-Process -NoNewWindow -Wait nmake libxmla
      #     Start-Process -NoNewWindow -Wait nmake "/f Makefile.msvc"
      #     Start-Process -NoNewWindow -Wait nmake "/f Makefile.msvc install"
      #     $xmlLib = Join-Path (pwd) bin.msvc
      #     $xmlInc = Join-Path (pwd) ..\include
      #   shell: pwsh

      # - name: Build libxslt
      #   run: |
      #     $iconvLib = Join-Path $env:GITHUB_WORKSPACE build\libiconv\MSVC16\x64\lib
      #     $iconvInc = Join-Path $env:GITHUB_WORKSPACE build\libiconv\source\include
      #     $zlibLib = Join-Path $env:GITHUB_WORKSPACE build\zlib
      #     $zlibInc = Join-Path $env:GITHUB_WORKSPACE build\zlib

      #     # $xmlLib = Join-Path $env:GITHUB_WORKSPACE build\libxml2\win32\bin.msvc
      #     # $xmlInc = Join-Path $env:GITHUB_WORKSPACE build\libxml2\include
      #     $xmlLib = Join-Path $env:GITHUB_WORKSPACE builddist\libxml2\lib
      #     $xmlInc = Join-Path $env:GITHUB_WORKSPACE builddist\libxml2\include\libxml2

      #     $libxsltDist = Join-Path $env:GITHUB_WORKSPACE dist\libxslt

      #     Set-Location .\libxslt\win32
      #     cscript configure.js prefix="$libxsltDist" lib="$zlibLib;$iconvLib;$xmlLib" include="$zlibInc;$iconvInc;$xmlInc" vcmanifest=yes zlib=yes
      #     # Start-Process -NoNewWindow -Wait nmake "libxslta libexslta"
      #     Start-Process -NoNewWindow -Wait nmake
      #     Start-Process -NoNewWindow -Wait nmake install
      #     $xsltLib = Join-Path (pwd) bin.msvc
      #     $xsltInc = Join-Path (pwd) ..
      #   shell: pwsh

      # - name: Build xmlsec
      #   run: |
      #     $iconvLib = Join-Path $env:GITHUB_WORKSPACE build\libiconv\MSVC16\x64\lib
      #     $iconvInc = Join-Path $env:GITHUB_WORKSPACE build\libiconv\source\include
      #     $zlibLib = Join-Path $env:GITHUB_WORKSPACE build\zlib
      #     $zlibInc = Join-Path $env:GITHUB_WORKSPACE build\zlib
      #     # $xmlLib = Join-Path $env:GITHUB_WORKSPACE build\libxml2\win32\bin.msvc
      #     # $xmlInc = Join-Path $env:GITHUB_WORKSPACE build\libxml2\include
      #     # $xsltLib = Join-Path $env:GITHUB_WORKSPACE build\libxslt\win32\bin.msvc
      #     # $xsltInc = Join-Path $env:GITHUB_WORKSPACE build\libxslt
      #     # $sslLib = Join-Path $env:GITHUB_WORKSPACE build\openssl\lib
      #     # $sslInc = Join-Path $env:GITHUB_WORKSPACE build\openssl\include

      #     $xmlLib = Join-Path $env:GITHUB_WORKSPACE builddist\libxml2\lib
      #     $xmlInc = Join-Path $env:GITHUB_WORKSPACE builddist\libxml2\include\libxml2
      #     $xsltLib = Join-Path $env:GITHUB_WORKSPACE builddist\libxslt\lib
      #     $xsltInc = Join-Path $env:GITHUB_WORKSPACE builddist\libxslt\include
      #     $sslLib = Join-Path $env:GITHUB_WORKSPACE build\openssl\lib
      #     $sslInc = Join-Path $env:GITHUB_WORKSPACE build\openssl\include

      #     $xmlsecDist = Join-Path $env:GITHUB_WORKSPACE dist\xmlsec

      #     Set-Location .\xmlsec\win32
      #     # cscript configure.js prefix="$xmlsecDist" lib="$zlibLib;$iconvLib;$xmlLib;$sslLib;$xsltLib" include="$zlibInc;$iconvInc;$xmlInc;$sslInc;$xsltInc" iconv=yes xslt=yes unicode=yes static=yes with-dl=no legacy-crypto=yes
      #     cscript configure.js lib="$zlibLib;$iconvLib;$xmlLib;$sslLib;$xsltLib" include="$zlibInc;$iconvInc;$xmlInc;$sslInc;$xsltInc" iconv=yes xslt=yes unicode=yes static=yes with-dl=no legacy-crypto=yes
      #     Start-Process -NoNewWindow -Wait -PassThru nmake xmlseca
      #     # Start-Process -NoNewWindow -Wait -PassThru nmake install
      #     # Start-Process -NoNewWindow -Wait -PassThru nmake xmlseca
      #     # $xmlsecLib = Join-Path $env:GITHUB_WORKSPACE build\xmlsec\win32\binaries
      #     # $xmlsecInc = Join-Path $env:GITHUB_WORKSPACE build\xmlsec\include
      #   shell: pwsh

      # - name: Bundle release
      #   run: |
      #     $distName = "win32"
      #     if ($env:MATRIX_ARCH -eq 'x64') {
      #       $distName = "win64"
      #       $sslTarget = "VC-WIN64A"
      #       $sslDo = "do_win64a.bat"
      #     }

      #     $iconvLib = Join-Path $env:GITHUB_WORKSPACE build\libiconv\MSVC16\x64\lib
      #     $iconvInc = Join-Path $env:GITHUB_WORKSPACE build\libiconv\source\include
      #     $zlibLib = Join-Path $env:GITHUB_WORKSPACE build\zlib
      #     $zlibInc = Join-Path $env:GITHUB_WORKSPACE build\zlib
      #     # $xmlLib = Join-Path $env:GITHUB_WORKSPACE build\libxml2\win32\bin.msvc
      #     # $xmlInc = Join-Path $env:GITHUB_WORKSPACE build\libxml2\include
      #     # $xsltLib = Join-Path $env:GITHUB_WORKSPACE build\libxslt\win32\bin.msvc
      #     # $xsltInc = Join-Path $env:GITHUB_WORKSPACE build\libxslt
      #     # $sslLib = Join-Path $env:GITHUB_WORKSPACE build\openssl\lib
      #     # $sslInc = Join-Path $env:GITHUB_WORKSPACE build\openssl\include
      #     $xmlsecLib = Join-Path $env:GITHUB_WORKSPACE build\xmlsec\win32\binaries
      #     $xmlsecInc = Join-Path $env:GITHUB_WORKSPACE build\xmlsec\include

      #     $xmlLib = Join-Path $env:GITHUB_WORKSPACE builddist\libxml2\lib
      #     $xmlInc = Join-Path $env:GITHUB_WORKSPACE builddist\libxml2\include\libxml2
      #     $xsltLib = Join-Path $env:GITHUB_WORKSPACE builddist\libxslt\lib
      #     $xsltInc = Join-Path $env:GITHUB_WORKSPACE builddist\libxslt\include
      #     $sslLib = Join-Path $env:GITHUB_WORKSPACE build\openssl\lib
      #     $sslInc = Join-Path $env:GITHUB_WORKSPACE build\openssl\include

      #     Function BundleRelease($name, $lib, $inc)
      #     {
      #         New-Item -ItemType Directory .\dist\$name

      #         New-Item -ItemType Directory .\dist\$name\lib
      #         Copy-Item -Recurse $lib .\dist\$name\lib
      #         Get-ChildItem -File -Recurse .\dist\$name\lib | Where{$_.Name -NotMatch ".(lib|pdb)$" } | Remove-Item

      #         New-Item -ItemType Directory .\dist\$name\include
      #         Copy-Item -Recurse $inc .\dist\$name\include
      #         Get-ChildItem -File -Recurse .\dist\$name\include | Where{$_.Name -NotMatch ".h$" } | Remove-Item

      #         # Write-Zip  .\dist\$name .\dist\$name.zip
      #         Compress-Archive -Path .\dist\$name -DestinationPath .\dist\$name.zip
      #         Remove-Item -Recurse -Path .\dist\$name
      #     }

      #     if (Test-Path .\dist) { Remove-Item .\dist -Recurse }
      #     New-Item -ItemType Directory .\dist

      #     # lxml expects iconv to be called iconv, not libiconv
      #     Dir $iconvLib\libiconv* | Copy-Item -Force -Destination {Join-Path $iconvLib ($_.Name -replace "libiconv","iconv") }

      #     BundleRelease "iconv-1.16-1.$distName" (dir $iconvLib\iconv_a*) (dir $iconvInc\*)
      #     BundleRelease "libxml2-2.11.7.$distName" (dir $xmlLib\*) (Get-Item $xmlInc\libxml)
      #     BundleRelease "libxslt-1.1.37.$distName" (dir $xsltLib\*) (Get-Item $xsltInc\libxslt,$xsltInc\libexslt)
      #     BundleRelease "zlib-1.2.12.$distName" (Get-Item $zlibLib\*.*) (Get-Item $zlibInc\zconf.h,$zlibInc\zlib.h)
      #     BundleRelease "openssl-3.0.8.$distName" (dir $sslLib\*) (Get-Item $sslInc\openssl)
      #     BundleRelease "xmlsec-1.3.4.$distName" (dir $xmlsecLib\*) (Get-Item $xmlsecInc\xmlsec)
      #   shell: pwsh
      #   env:
      #     MATRIX_ARCH: ${{ matrix.arch }}

      # - name: Zip the build directory
      #   run: |
      #     Compress-Archive -Path xmlsec/* -DestinationPath xmlsec.zip -Force
      #   shell: pwsh

      # - name: Upload module artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: xmlsec
      #     path: xmlsec.zip

      # - name: Zip the dist directory
      #   run: |
      #     Compress-Archive -Path dist/* -DestinationPath dist.zip -Force
      #   shell: pwsh

      # - name: Upload dist artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: dist
      #     path: dist.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: bundle release
          path: dist

      # - name: Upload Artifact2
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: opensslbuild
      #     path: opensslbuild.zip
