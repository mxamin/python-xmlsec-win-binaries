name: windows
on: [push, pull_request]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        # platform: [x86, x64]
        arch: [x64]

    steps:
      - uses: actions/checkout@v3
        name: Checkout code
        with:
          submodules: 'recursive'

      # - name: Install Pscx Module
      #   shell: pwsh
      #   run: |
      #     Install-Module -Name Pscx -Force -Scope CurrentUser
      #     Import-Module Pscx
  
      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
          # toolset: 14.0

      # - name: Print MSBuild Version
      #   shell: cmd
      #   run: |
      #     msbuild -version

      # - name: Setup PowerShell
      #   run: |
      #     $ErrorActionPreference = 'Stop'  # Stops on errors
      #     Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process  # Temporarily change the execution policy

      # - name: Install Pscx Module
      #   run: |
      #     Install-Module -Name Pscx -Repository PSGallery -Force -Scope CurrentUser -AllowClobber
      #     # Install-Module -Name Pscx
      #     # Install-Module -Name Pscx -RequiredVersion 4.0.0-beta4 -AllowPrerelease -Force
      #   shell: pwsh

      # - name: Setup MSVC for Visual Studio 2022
      #   run: |
      #     $vsPath = & "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.Component.MSBuild -property installationPath
      #     $vsVarsPath = "${vsPath}\VC\Auxiliary\Build\vcvars64.bat"
      #     echo "##vso[task.prependpath]$vsPath"
      #     call $vsVarsPath
      #   shell: cmd

      # - name: Setup Visual Studio 2022 Environment
      #   run: |
      #     Import-VisualStudioVars -VisualStudioVersion 2022 -Architecture ${{ matrix.arch }}
      #     # Import-Module Pscx
      #     # $vsVersion = "140"
      #     # $architecture = "x64"
      #     # Import-VisualStudioVars -VisualStudioVersion $vsVersion -Architecture $architecture
      #   shell: pwsh

      # - name: Setup MSBuild path
      #   run: |
      #     $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.Component.MSBuild -find "MSBuild\**\Bin"
      #     $env:PATH += ";$vsPath"
      #     msbuild -version
      #   shell: pwsh

      # - name: Build libiconv
      #   run: |
      #     # Import-VisualStudioVars -VisualStudioVersion 140 -Architecture ${{ matrix.arch }}
      #     # Import-VisualStudioVars -VisualStudioVersion 140 -Architecture amd64
      #     # Set-Location .\libiconv\MSVC16
      #     # msbuild libiconv.sln /p:Configuration=Release /t:libiconv_static

      #     Set-Location .\libiconv\MSVC16
      #     msbuild libiconv_static\libiconv_static.vcxproj /p:Configuration=Release

      #     $platDir = ""
      #     if ($env:MATRIX_ARCH -eq 'x64') {
      #       $platDir = "\x64"
      #     }
      #     $iconvLib = Join-Path (pwd) $platDir\lib
      #     $iconvInc = Join-Path $env:GITHUB_WORKSPACE libiconv\source\include
      #     "ICONV_LIB=$iconvLib" | Out-File -FilePath $Env:GITHUB_ENV -Append
      #     "ICONV_INC=$iconvInc" | Out-File -FilePath $Env:GITHUB_ENV -Append
      #   env:
      #     MATRIX_ARCH: ${{ matrix.arch }}
      #   shell: pwsh

      # - name: Build zlib
      #   run: |
      #     Set-Location .\zlib
      #     # Start-Process -NoNewWindow -Wait -PassThru nmake "-f win32/Makefile.msc zlib.lib"
      #     # Start-Process -NoNewWindow -Wait nmake "-f win32/Makefile.msc zlib.lib"
      #     Start-Process -NoNewWindow -Wait nmake "-f win32/Makefile.msc zlib_a.lib"
      #     Move-Item zlib_a.lib zlib.lib -force
      #     $zlibLib = (pwd)
      #     $zlibInc = (pwd)
      #     "ZLIB_LIB=$zlibLib" | Out-File -FilePath $Env:GITHUB_ENV -Append
      #     "ZLIB_INC=$zlibInc" | Out-File -FilePath $Env:GITHUB_ENV -Append
      #   shell: pwsh

      - name: Build libxml2
        run: |
          Write-Host "ICONV_LIB: $env:ICONV_LIB"
          Write-Host "ICONV_INC: $env:ICONV_INC"
          Write-Host "ZLIB_LIB: $env:ZLIB_LIB"
          Write-Host "ZLIB_INC: $env:ZLIB_INC"

          $iconvLib = Join-Path $env:GITHUB_WORKSPACE build\libiconv\MSVC16\x64\lib
          $iconvInc = Join-Path $env:GITHUB_WORKSPACE build\libiconv\source\include
          $zlibLib = Join-Path $env:GITHUB_WORKSPACE build\zlib
          $zlibInc = Join-Path $env:GITHUB_WORKSPACE build\zlib

          Set-Location .\libxml2\win32
          cscript configure.js lib="$zlibLib;$iconvLib" include="$zlibInc;$iconvInc" vcmanifest=yes zlib=yes
          # cscript configure.js lib="$env:ZLIB_LIB;$env:ICONV_LIB" include="$env:ZLIB_INC;$env:ICONV_INC" vcmanifest=yes zlib=yes
          Start-Process -NoNewWindow -Wait nmake libxmla
          $xmlLib = Join-Path (pwd) bin.msvc
          $xmlInc = Join-Path (pwd) ..\include
        shell: pwsh

      - name: Zip the build directory
        run: |
          Compress-Archive -Path libxml2/* -DestinationPath libxml2.zip -Force
        shell: pwsh

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: libxml2
          path: libxml2.zip
